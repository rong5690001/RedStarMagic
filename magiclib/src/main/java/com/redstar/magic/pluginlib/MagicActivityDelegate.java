package com.redstar.magic.pluginlib;import android.app.Activity;import android.app.Dialog;import android.app.Fragment;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.content.res.Configuration;import android.content.res.Resources;import android.graphics.Bitmap;import android.graphics.Canvas;import android.os.Bundle;import android.util.AttributeSet;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.Menu;import android.view.MotionEvent;import android.view.View;import android.view.WindowManager;import com.redstar.magic.pluginlib.proxy.HostActivityDelegate;import com.redstar.magic.pluginlib.proxy.IProxyActivity;import static com.redstar.magic.pluginlib.IPluginComponentLauncher.KEY_CLASS_NAME;import static com.redstar.magic.pluginlib.IPluginComponentLauncher.KEY_PLUGIN_NAME;/** * Created by chen.huarong on 2019-07-11. */public class MagicActivityDelegate implements HostActivityDelegate {    private static final String TAG = MagicActivityDelegate.class.getSimpleName();    ShadowContext mNicePluginContext;    ClassLoader mPluginClassLoader;    //TODO 后面要优化成合成Resource(合成宿主资源)    Resources mResources;    IProxyActivity mPluginProxyActivity;    PluginActivity mPluginActivity;    private boolean mPluginActivityCreated = false;    /**     * 判断是否调用过OnWindowAttributesChanged，如果调用过就说明需要在onCreate之前调用     */    private boolean mCallOnWindowAttributesChanged = false;    private WindowManager.LayoutParams mBeforeOnCreateOnWindowAttributesChangedCalledParams = null;    public MagicActivityDelegate() {        PluginApk pluginApk = PluginManager.getInstance().getPluginApk();        if (pluginApk == null) {            throw new NullPointerException("请先加载apk");        }        mPluginClassLoader = pluginApk.mClassLoader;        mResources = pluginApk.mResources;    }    @Override    public void setDelegator(IProxyActivity pluginProxy) {        mPluginProxyActivity = pluginProxy;    }    @Override    public Object getPluginActivity() {        return mPluginActivity;    }    @Override    public void onCreate(Bundle savedInstanceState) {        savedInstanceState = savedInstanceState == null ?                mPluginProxyActivity.getIntent().getExtras() : savedInstanceState;        String activityClassName = mPluginProxyActivity.getIntent().getStringExtra(KEY_CLASS_NAME);        String pluginName = mPluginProxyActivity.getIntent().getStringExtra(KEY_PLUGIN_NAME);        try {            Class clazz = mPluginClassLoader.loadClass(activityClassName);            mPluginActivity = (PluginActivity) clazz.newInstance();            mPluginActivity.setHostContextAsBase((Context) mPluginProxyActivity);            mPluginActivity.setPluginClassLoader(mPluginClassLoader);            mPluginActivity.setPluginResources(mResources);            mPluginActivity.setPluginName(pluginName);            mPluginActivity.setPluginComponentLauncher(PluginManager.getInstance().getComponentLauncher());            mPluginActivity.setHostActivityDelegator(mPluginProxyActivity);            //Activity.onCreate调用之前应该先收到onWindowAttributesChanged。            if (mCallOnWindowAttributesChanged) {                mPluginActivity.onWindowAttributesChanged(mBeforeOnCreateOnWindowAttributesChangedCalledParams);                mBeforeOnCreateOnWindowAttributesChangedCalledParams = null;            }            mPluginActivity.onCreate(savedInstanceState);            mPluginActivityCreated = true;        } catch (Throwable e) {            e.printStackTrace();        }    }    @Override    public void onResume() {        mPluginActivity.onResume();    }    @Override    public void onNewIntent(Intent intent) {        mPluginActivity.onNewIntent(intent);    }    @Override    public void onSaveInstanceState(Bundle outState) {        mPluginActivity.onSaveInstanceState(outState);    }    @Override    public void onPause() {        mPluginActivity.onPause();    }    @Override    public void onStop() {        mPluginActivity.onStop();    }    @Override    public void onDestroy() {        mPluginActivity.onDestroy();    }    @Override    public void onConfigurationChanged(Configuration newConfig) {        mPluginActivity.onConfigurationChanged(newConfig);    }    @Override    public boolean dispatchKeyEvent(KeyEvent event) {        return mPluginActivity.dispatchKeyEvent(event);    }    @Override    public void finish() {        mPluginActivity.finish();    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        mPluginActivity.onActivityResult(requestCode, resultCode, data);    }    @Override    public void onChildTitleChanged(Activity childActivity, CharSequence title) {        mPluginActivity.onChildTitleChanged(childActivity, title);    }    @Override    public void onRestoreInstanceState(Bundle savedInstanceState) {        mPluginActivity.onRestoreInstanceState(savedInstanceState);    }    @Override    public void onPostCreate(Bundle savedInstanceState) {        mPluginActivity.onPostCreate(savedInstanceState);    }    @Override    public void onRestart() {        mPluginActivity.onRestart();    }    @Override    public void onUserLeaveHint() {        mPluginActivity.onUserLeaveHint();    }    @Override    public boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas) {        return mPluginActivity.onCreateThumbnail(outBitmap, canvas);    }    @Override    public CharSequence onCreateDescription() {        return mPluginActivity.onCreateDescription();    }    @Override    public Object onRetainNonConfigurationInstance() {        return mPluginActivity.onRetainNonConfigurationInstance();    }    @Override    public void onLowMemory() {        mPluginActivity.onLowMemory();    }    @Override    public boolean onTrackballEvent(MotionEvent event) {        return mPluginActivity.onTrackballEvent(event);    }    @Override    public void onUserInteraction() {        mPluginActivity.onUserInteraction();    }    @Override    public void onWindowAttributesChanged(WindowManager.LayoutParams params) {        if (mPluginActivityCreated) {            mPluginActivity.onWindowAttributesChanged(params);        } else {            mBeforeOnCreateOnWindowAttributesChangedCalledParams = params;        }        mCallOnWindowAttributesChanged = true;    }    @Override    public void onContentChanged() {        mPluginActivity.onContentChanged();    }    @Override    public void onWindowFocusChanged(boolean hasFocus) {        mPluginActivity.onWindowFocusChanged(hasFocus);    }    @Override    public View onCreatePanelView(int featureId) {        return mPluginActivity.onCreatePanelView(featureId);    }    @Override    public boolean onCreatePanelMenu(int featureId, Menu menu) {        return mPluginActivity.onCreatePanelMenu(featureId, menu);    }    @Override    public boolean onPreparePanel(int featureId, View view, Menu menu) {        return mPluginActivity.onPreparePanel(featureId, view, menu);    }    @Override    public void onPanelClosed(int featureId, Menu menu) {        mPluginActivity.onPanelClosed(featureId, menu);    }    @Override    public Dialog onCreateDialog(int id) {        return mPluginActivity.onCreateDialog(id);    }    @Override    public void onPrepareDialog(int id, Dialog dialog) {        mPluginActivity.onPrepareDialog(id, dialog);    }    @Override    public void onApplyThemeResource(Resources.Theme theme, int resid, boolean first) {        mPluginProxyActivity.superOnApplyThemeResource(theme, resid, first);        //TODO 此处不一定会执行，后面优化        if (mPluginActivityCreated) {            mPluginActivity.onApplyThemeResource(theme, resid, first);        }    }    @Override    public View onCreateView(String name, Context context, AttributeSet attrs) {        return mPluginActivity.onCreateView(name, context, attrs);    }    @Override    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {        return mPluginActivity.onCreateView(parent, name, context, attrs);    }    @Override    public void startActivityFromChild(Activity child, Intent intent, int requestCode) {        mPluginActivity.startActivityFromChild(child, intent, requestCode);    }    @Override    public ClassLoader getClassLoader() {        return mPluginClassLoader;    }    @Override    public LayoutInflater getLayoutInflater() {        return mPluginProxyActivity.getLayoutInflater();    }    @Override    public Resources getResources() {        return mResources;    }    @Override    public void onBackPressed() {        mPluginActivity.onBackPressed();    }    @Override    public void onStart() {        mPluginActivity.onStart();    }    @Override    public void onAttachedToWindow() {        mPluginActivity.onAttachedToWindow();    }    @Override    public void onDetachedFromWindow() {        mPluginActivity.onDetachedFromWindow();    }    @Override    public void onAttachFragment(Fragment fragment) {        mPluginActivity.onAttachFragment(fragment);    }    @Override    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {        mPluginActivity.onRequestPermissionsResult(requestCode, permissions, grantResults);    }    @Override    public void recreate() {        mPluginActivity.recreate();    }    @Override    public ComponentName getCallingActivity() {        return null;    }    @Override    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {        mPluginActivity.onMultiWindowModeChanged(isInMultiWindowMode);    }    @Override    public void onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig) {        mPluginActivity.onMultiWindowModeChanged(isInMultiWindowMode, newConfig);    }//    public void inject(Resources resources) {//        mResources = resources;//    }}