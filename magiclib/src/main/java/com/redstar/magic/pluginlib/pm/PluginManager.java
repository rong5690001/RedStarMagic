package com.redstar.magic.pluginlib.pm;import android.content.Context;import android.content.pm.PackageManager;import android.text.TextUtils;import com.redstar.magic.pluginlib.IPluginComponentLauncher;import com.redstar.magic.pluginlib.InstalledApk;import com.redstar.magic.pluginlib.PluginApk;import com.redstar.magic.pluginlib.PluginComponentLauncher;import com.redstar.magic.pluginlib.pm.impl.PluginLoaderImpl;import com.redstar.magic.pluginlib.tools.Logger;import com.redstar.magic.pluginlib.utils.FileUtils;import java.io.File;import java.io.FilenameFilter;import java.util.HashMap;import java.util.Map;public class PluginManager {    private static final String TAG = PluginManager.class.getSimpleName();    /**     * 插件根目录名称     */    private static final String DIR_PLUGIN = "plugins";    /**     * 优化后的dex目录     */    private static final String DIR_PLUGIN_DEX = "odex";    /**     * 插件根目录     */    private static File mPluginRootDir;    private static final PluginManager sInstance = new PluginManager();    public static PluginManager getInstance() {        return sInstance;    }    private PluginManager() {    }    private Context mContext;    private PluginInstaller mPluginInstaller;    private PluginLoader mPluginLoader;    private Map<String, PluginApk> mPlugins = new HashMap<>();    private IPluginComponentLauncher mComponentLauncher;    public void init(Context context) {        mContext = context.getApplicationContext();        mComponentLauncher = new PluginComponentLauncher();        mPluginRootDir = context.getDir(DIR_PLUGIN, Context.MODE_PRIVATE);        mPluginInstaller = new PluginInstaller();        mPluginLoader = new PluginLoaderImpl();    }    /**     * 加载插件apk     *     * @param pkg              插件名     * @param veritySignatures 是否校验签名     * @return 是否加载成功     */    public boolean loadApk(String pkg, boolean veritySignatures) {        if (isLoaded(pkg)) {//已加载            Logger.d(TAG, "插件已加载");            return true;        }        if (!mPluginInstaller.isInstall(pkg)) {//未安装//            PathManager.getInstance().getDownloadDir(pkg).list(new FilenameFilter() {//                @Override//                public boolean accept(File dir, String name) {//                    if (TextUtils.equals(name, pkg + )) {////                    }//                }//            });        }//        mPluginInstaller.install();        String apkPath = FileUtils.copyAssetToFile(mContext, getPluginFileName(pkg),                mPluginRootDir);        if (TextUtils.isEmpty(apkPath)) {            throw new NullPointerException("apkPath is null");        }        File pluginDir = new File(mPluginRootDir, pkg);        pluginDir.mkdirs();        File dexDir = new File(pluginDir, DIR_PLUGIN_DEX);        dexDir.mkdirs();        InstalledApk installedApk = new InstalledApk(apkPath, dexDir.getAbsolutePath(), apkPath);        try {            PluginApk pluginApk = mPluginLoader.load(mContext, installedApk, veritySignatures);            if (pluginApk == null) {                return false;            }            mPlugins.put(pkg, pluginApk);        } catch (PackageManager.NameNotFoundException e) {            e.printStackTrace();            return false;        }        return true;    }    /**     * 根据插件名称获取     *     * @param pluginName     * @return     */    private String getPluginFileName(String pluginName) {        //TODO        return "plugin" + ".apk";    }    public PluginApk getPluginApk(String packageName) {        return mPlugins.get(packageName);    }    public IPluginComponentLauncher getComponentLauncher() {        return mComponentLauncher;    }    /**     * 插件是否已加载     *     * @return     */    public boolean isLoaded(String pkg) {        return mPlugins.containsKey(pkg);    }}