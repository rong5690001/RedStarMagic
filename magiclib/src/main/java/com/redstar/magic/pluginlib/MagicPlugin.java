package com.redstar.magic.pluginlib;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import com.redstar.magic.pluginlib.container.PluginContainerActivity;import static com.redstar.magic.pluginlib.IPluginComponentLauncher.KEY_CLASS_NAME;import static com.redstar.magic.pluginlib.IPluginComponentLauncher.KEY_PLUGIN_NAME;/** * Created by chen.huarong on 2019-06-27. * 插件框架对宿主暴露的接口 */public class MagicPlugin {    private static final String TAG = MagicPlugin.class.getSimpleName();//    /**//     * hook系统ClassLoader//     *//     * @param base//     *///    static void hook(Context base) {//        try {//            // 获取mBase.mPackageInfo//            // 1. ApplicationContext - Android 2.1//            // 2. ContextImpl - Android 2.2 and higher//            // 3. AppContextImpl - Android 2.2 and higher//            Object mPackInfo = ReflectUtils.readField(base, "mPackageInfo");//            // 获取mPackageInfo.mClassLoader//            ClassLoader mSystemClassLoader = (ClassLoader) ReflectUtils.readField(mPackInfo,//                    "mClassLoader");////            //创建替你系统的ClassLoader//            ClassLoader npClassLoader = new NiceMainClassLoader(mSystemClassLoader);//            // 将新的ClassLoader写入mPackageInfo.mClassLoader////            ReflectUtils.writeField(mPackInfo, "mClassLoader", npClassLoader);//        } catch (Throwable e) {//            e.printStackTrace();//        }//    }    /**     * 启动插件Activity     *     * @param context     * @param pluginName     * @param intent     */    public static boolean startActivity(Context context, String pluginName, Intent intent) {        //插件是否安装 || 安装成功 -> 是否安装?安装成功:true        ComponentName componentName = intent.getComponent();        intent.putExtra(KEY_PLUGIN_NAME, pluginName);        if (isInstalled(pluginName) || installPlugin(pluginName)) {            context.startActivity(transformIntent(context, intent));            return true;        }        Logger.e(TAG, "插件{ %s }的activity{ %s } 启动失败", pluginName, componentName.getClassName());        return false;    }    /**     * 转换Intent为启动代理Activity     *     * @param context     * @param intent     * @return     */    private static Intent transformIntent(Context context, Intent intent) {        Intent intentProxy = new Intent(intent);        intentProxy.setExtrasClassLoader(PluginManager.getInstance().getPluginApk().mClassLoader);        intentProxy.putExtra(KEY_CLASS_NAME, intent.getComponent().getClassName());        intentProxy.setComponent(new ComponentName(context, PluginContainerActivity.class.getName()));        return intentProxy;    }    /**     * 安装插件     *     * @param pluginName     */    protected static boolean installPlugin(String pluginName) {        if (PluginManager.getInstance().loadApk(pluginName)) {            return true;        } else {            Logger.e(TAG, "插件{ %s }安装失败", pluginName);            return false;        }    }    protected static boolean isInstalled(String pluginName) {        return PluginManager.getInstance().isInstalled();    }}